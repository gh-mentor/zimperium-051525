Manufacturing Simulation Workshop using Java

In this workshop, you will create a Java simulation model for a manufacturing plant. The model should simulate the assembly and quality control processes of a manufacturing plant that produces a new brand of AI-enabled Micro Widgets (MWs). The goal is to create an extensible simulation model that can analyze the performance of the manufacturing process, identify bottlenecks, and optimize resource utilization.

### Objective

The simulation model should:
- Be flexible and extensible, allowing for future enhancements and modifications.
- Handle different scenarios and configurations, such as varying the number of assembly lines, QC teams, and inspection rates.
- Generate summary reports and metrics for both the assembly and quality control processes.
- Be able to run daily or weekly simulations.

### Key Details

#### Assembly Process:
- There are 5 assembly lines operating in parallel Monday – Thursday, 6 hours per workday, starting at 7 AM.
- Each line can assemble a maximum of 100 MWs per hour.
- On average, each line assembles 80 MWs per hour with a standard deviation of 10 MWs.
- Occasionally, a MW is damaged during assembly, with a likelihood of 0.5%, standard deviation 0.2%.
  - Damaged products are shelved, and a log entry is recorded with the date/time, line number, and description (default: "damaged in production").
- At the end of each hour and at the end of the workday, the Assembly Line Manager delivers the MWs in batches to Quality Control.
  - A log entry contains the date/time, count of MWs, and line number.
- There is a 10% likelihood that a line failure will occur during the workday. The downtime is 60 minutes on average, with a standard deviation of 15 minutes.
  - A log entry with the date/time, line number, and outage duration is recorded.
- At the end of the workday, the Assembly Line Manager generates a summary report containing:
  - The number of assembled MWs per line.
  - The total number delivered to QC.
  - Any line failure details.

#### Quality Control Process:
- There are 5 teams of QC Engineers, each with 3 members working in parallel Monday – Friday, 8 hours per workday, starting at 8 AM, with a 45-minute lunch break at 12:00 PM.
- Each QC Engineer can inspect and log up to 12 MWs per hour, the average being 8 with a standard deviation of 2.
- On average, 2.5% of MWs are logged as defective (failed inspection) with a standard deviation of 1%.
- At the end of the workday, the Quality Control Manager generates a summary report containing:
  - The total count of acceptable MWs.
  - Total defects.
  - Backlog count (MWs still in the queue).

### Instructions and Suggestions

- Design, implement, and test a Java simulation model for the manufacturing process.
- Use `ExecutorService` or `CompletableFuture` to simulate the parallel processes of assembly and quality control.
- Implement a queue to manage the flow of MWs from assembly to quality control.
- Use a logging mechanism to generate summary reports.
- Encapsulate different components of the simulation using a class-based approach.
- Use Javadoc comments to document the code.
- Adhere to SOLID design principles to ensure maintainability and scalability of the code.
- Incorporate all the key details into the final solution.

### Deliverables Wish List

#### Assembly Process Metrics:
- **Average Downtime per Line**: Track the average downtime for each assembly line over the simulation period.
- **Line Utilization Rate**: Calculate the percentage of time each assembly line is operational versus idle or down.
- **Damaged Product Rate**: Measure the percentage of MWs damaged during assembly for each line.
- **Hourly Production Rate**: Track the number of MWs assembled per hour for each line.
- **Cumulative Production**: Total MWs produced by all lines over the simulation period.
- **Line Failure Frequency**: Count the number of failures per line during the simulation.

#### Quality Control Metrics:
- **Inspection Throughput**: Measure the number of MWs inspected per hour by each QC team.
- **Defect Rate per Team**: Track the percentage of defective MWs identified by each QC team.
- **Backlog Growth Rate**: Monitor how quickly the backlog grows when inspection cannot keep up with assembly.
- **Average Inspection Time per MW**: Calculate the average time taken to inspect a single MW.
- **Team Utilization Rate**: Measure the percentage of time each QC team is actively inspecting MWs.

#### Queue Management Metrics:
- **Average Queue Length**: Track the average number of MWs waiting in the queue between assembly and QC.
- **Maximum Queue Length**: Record the peak number of MWs in the queue during the simulation.
- **Queue Wait Time**: Measure the average time an MW spends in the queue before inspection.

#### Overall Metrics:
- **Daily Defect Trends**: Track how defect rates change over the course of a day or week.
- **System Efficiency**: Calculate the ratio of MWs successfully inspected to MWs produced.
- **Resource Utilization**: Measure the percentage of time assembly lines and QC teams are actively working versus idle.
- **End-of-Day Backlog Trends**: Analyze how the backlog changes at the end of each day over a week-long simulation.

#### Simulation-Based Metrics What-If Analysis:
- Simulate alternative scenarios: Use different numbers of assembly lines or QC teams to evaluate their impact on production and backlog.
- Bottleneck Identification: Use simulation data to identify the process step (assembly, queue, or QC) with the highest average wait time or lowest throughput.
- Optimal Staffing Levels: Calculate the optimal number of QC engineers or assembly lines required to minimize backlog and maximize throughput.
